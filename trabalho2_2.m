%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Trabalho n√∫mero 2 de Sistemas Inteligentes.
% C√≥digo por Pedro Henrique Faber e Lucas Guilhem de Matos
% Mapa de Kohonen para classifica√ß√£o de dados da base MNIST.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inicializa√ß√£o do Programa.

clear all
close all
clc 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Vetoriza√ß√£o das Imagens de Treinamento e Valida√ß√£o. 
%  N√ÉO ALTERAR ESSE TRECHO

% Imagens para treinamento.
treino = loadMNISTImages('train-images.idx3-ubyte');

%Labels para o Treinamento
labels = loadMNISTLabels('train-labels.idx1-ubyte');
num = 5000;%length(labels); %N√∫mero de Labels, consequentemente, de Imagens.

%Imagens para valida√ß√£o.
teste = loadMNISTImages('t10k-images.idx3-ubyte');

%Labels para valida√ß√£o.
labels_teste = loadMNISTLabels('t10k-labels.idx1-ubyte');
num2 = 5000;%length(labels_teste); %N√∫mero de Labels, consequentemente, de Imagens.

%Alem da defini√ß√£o de Matriz de Respostas
%Matriz com as respostas. As refer√™ncias s√£o 0.1 e 0.9. √â comum essa
%Utiliza√ß√£o para que o erro seja reduzido.
answers = 0.1*ones(num,10); 
%Uma segest√£o comum √© utilizar 0.1 e 0.9
for i=1:num
    answers(i,labels(i)+1) = 0.9;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defini√ß√£o dos Par√¢metros do Mapa de Kohonen. Aprendizado, Raio e Pesos.

% Tamanho do mapa.
N = 30;

% Pesos dos neurios por tamanho de entrada
w = rand(784 , N , N);

% O Mapa de Kohonen. Matriz onde os neur√¥nios ser√£o rotulados.
kohonen = zeros(N , N);

% Taxa de Aprendizado Inicial. Esse valor √© alterado ao longo da execu√ß√£o. 
eta_ini= 0.9;
eta = eta_ini;

% Para o caso de utiliza√ß√£o de uma gaussiana na fun√ß√£o de vizinhan√ßa.
sigma_ini = N/3;
sigma = sigma_ini;

%Vari√°veis de Performance
acertos = 0;
erros = 0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defini√ß√£o dos Par√¢metros para o Perceptron.

%Perceptron multicamada para identifica√ß√£o de imagens.
%Valor inicial da primeira camada. 
cam1 = 40;
%Valor inicial da segunda Camada. 
cam2 = 100;
%Valor inicial da terceira Camada.
cam3 = 10; %Essa camada n√£o deve ser modificada
%Metodologia de Aprendizado com o Crit√©rio de M√≠nimos Quadrados.
%Fun√ß√£o de Ativa√ß√£o A ser Definica pelo Usu√°rio

%Defini√ß√£o do N√∫mero m√°ximo de √âpocas que ser√£o utilizadas em treinamento. Uma
%√©poca √© a utiliza√ß√£o de todas as imagens de treinamento. O n√∫mero de √©pocas,
%√© o n√∫mero de vezes que o programa leu todas as imagens.
epoca=5;

%Declara√ß√£o das Matrizes de pesos Inicial - Pesos Aleat√≥rios
w1 = rand(N^2 + 1 ,cam1)*.2-.1; %Primeira camada
w2 = rand(cam1+1,cam2)*.2-.1; %Segunda camada
w3 = rand(cam2+1,cam3)*.2-.1;%Terceira Camada

eta_p = 0.1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% La√ßos Principais

tic
%% La√ßo de Treinamento do Mapa de Kohonen
for k = 1:num

    %La√ßo para a verifica√ß√£o de qual neur√¥nio responde √† entrada. em
    %quest√£o.
    for i = 1:N
        for j = 1:N

            erro(:,i,j) = treino(:,k) - w(:,i,j); %Verifica as dist√¢ncia entre vetores
            distance(i,j) = norm(erro(:,i,j)); % Calcula a distancia euclidiana, ou a norma.

        end
    end

    [M,I] = min(distance(:));
    [min_i, min_j] = ind2sub(size(distance),I); %Verifica qual o √?ndice do neur√¥nio responde melhor √† entrada.


    % ROTULA O NEUR√îNIO NO MAPA DE KOHONEN    
    kohonen(min_i, min_j) = labels(k);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %ATUALIZA√á√ÉO DOS PESOS. 

    % Esse trecho define os limites de atua√ß√£o da atualiza√ß√£o de pesos
    % baseando-se no raio de Vizinhan√ßa. Fun√ß√£o Gaussiana

   % Atualiza√ß√£o dos Pesos do Mapa.
   % A sintaxe √© w(k+1) = w(k) + (Taxa de Aprendizado)*(Fun√ß√£o de
   % Vizinhan√ßa)*(x(k)-w(k)); A Fun√ß√£o de Vizinhan√ßa √© uma Gaussiana.

    for i = 1:N
        for j = 1:N

            w(: , i, j) = w(:, i, j) + exp(-(norm([i,j]-[min_i,min_j])^2)/(2*(sigma^2)))*eta*erro(:,i,j);

        end
    end

    % Atualiza√ß√£o da Vari√¢ncia da Gaussiana
    plot1(k) = sigma; %Vetor para acompanhar a evolu√ß√£o do Raio de Vizinhan√ßa.
    % O 0.75 na euqa√ß√£o existe para que o raio de vizinhan√ßa decaia mais
    % rapidamente. de forma que a vari√¢ncia seja
    sigma = sigma_ini*exp(-k/(0.75*num/(4.6)));

    % Atuali√ß√£o da Taxa de Aprendizado.
    plot2(k) = eta; %Vetor para acompanhar a taxa de aprendizado.
    eta = eta_ini*exp(-k/(num/4.5)); 

end
toc
% tic
% %% La√ßo de Valida√ß√£o Usando Mapa de Kohonen.
% for k = 1:num2
% 
%     %La√ßo para a verifica√ß√£o de qual neur√¥nio responde √† entrada. em
%     %quest√£o.
%     for i = 1:N
%         for j = 1:N
% 
%             erro(:,i,j) = teste(:,k) - w(:,i,j); %Verifica as dist√¢ncia entre vetores
%             distance(i,j) = norm(erro(:,i,j)); % Calcula a distancia euclidiana, ou a norma.
% 
%         end
%     end
% 
%     [M,I] = min(distance(:));
%     [min_i, min_j] = ind2sub(size(distance),I); %Verifica qual o √?ndice do neur√¥nio responde melhor √† entrada.
% 
%     if kohonen(min_i,min_j) == labels_teste(k)
%         acertos = acertos+1;
%     else
%         erros = erros+1;
%     end
% end
% toc

%% La√ßo de Treinamento e valida√ß√£o do Perceptron.
for j=1:epoca
    %Loop de Propaga√ß√£o do erro para uma √©poca
    for i=1:num
        
        % Cria a Entrada para O treinamento
        for n = 1:N
            for m = 1:N

            erro(:,n,m) = treino(:,i) - w(:,n,m); %Verifica as dist√¢ncia entre vetores
            distance(n,m) = 1/norm(erro(:,n,m)); % Calcula a distancia euclidiana, ou a norma.

            end
        end
                               
        s1 = [distance(:)' 1]*w1;
        y1 = 1./(1+exp(-s1));
        s2 = [y1 1]*w2;
        y2 = 1./(1+exp(-s2));
        s3 = [y2 1]*w3;
        y3 = 1./(1+exp(-s3));

        %Par√¢metros a serem avaliados
        %Evolu√ß√£o do erro quadr√°tico
        %sse(i)=sse(i)+(d(j)-y2)^2;

        %Retropropaga√ß√£o
        %A derivada da fun√ß√£o Log√≠stica √© g(s)*(1-g(s)), como no caso a
        %fun√ß√£o g(s) √© igual a y2, temos y2*(1-y2)
        %O erro √© dado por (d-y2)*g'(s) = (d-y2)*y2*(1-y2)
        %Para a segunda camada escondida.
        e3=(answers(i,:)-y3).*y3.*(1-y3); 
        dw3=transpose([y2 1])*e3;

        %O C√°lculo geral do perceptron √© dw = eta * (d-y) * "entrada"
        %Para a primeira camada escondida
        e2= (e3*transpose(w3(1:cam2,1:cam3))).*y2.*(1-y2); % Propaga√ß√£o do erro para 1a camada
        dw2=transpose([y1 1])*e2;

        %O C√°lculo geral do perceptron √© dw = eta * (d-y) * "entrada"
        %Para a camada de entrada
        e1= (e2*transpose(w2(1:cam1,1:cam2))).*y1.*(1-y1); % Propaga√ß√£o do erro para 1a camada
        dw1=[distance(:); 1]*e1;

        %Atualiza√ß√£o dos pesos depois do treinamento.
        w1=w1+eta_p*dw1; 
        w2=w2+eta_p*dw2;
        w3=w3+eta_p*dw3;

        %Atualiza√ß√£o da taxa de aprendizado. Indicado em alguns casos
        %eta = 0.9999*eta;

        %C√°lculo do erro quadr√°tico m√©dio. Medi√ß√£o de Desempenho.
        sse(i) = ((answers(i,:)-y3)*transpose(answers(i,:)-y3))/cam3;
        
    end
    
    %Erro quadr√°tico m√©dio no treinamento.
    eqm(j) = (sum(sse))/num;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %Constantes para a n√°lise da porcentagem de acertos.
    acertos = 0;
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %Loop de Teste. Esse Loop √â utilizado para a verifica√ß√£o do √≠ndice de
    %acertos depois do treinamento

    for i=1:num2
        
        for n = 1:N
            for m = 1:N

            erro(:,n,m) = teste(:,i) - w(:,n,m); %Verifica as dist√¢ncia entre vetores
            distance(n,m) = 1/norm(erro(:,n,m)); % Calcula a distancia euclidiana, ou a norma.

            end
        end

           %C√°lculo da sa√≠da para as imagens de valida√ß√£o
        s1 = [distance(:)' 1]*w1;
        y1 = 1./(1+exp(-s1));
        s2 = [y1 1]*w2;
        y2 = 1./(1+exp(-s2));
        s3 = [y2 1]*w3;
        y3 = 1./(1+exp(-s3));

        [M,I] = max(y3(:));% Essa fun√ß√£o acha o √≠ndice do maior valor do vetor.

        %Atualiza√ß√£o de Valores de Acertos e Erros.
        %Notar que a label come√ßa no zero, mas o √≠ndice do vetor come√ßa em 1,
        %ent√£o √© importante somar 1 ao valor da label para realizar a
        %compara√ß√£o.
        if I==(labels_teste(i)+1)
            acertos = acertos+1;
        end
    end

    %C√°lculo do √≠ndice de acerto. N√∫mero de Acertos sobre o total de Imagens
    %vistas.
    indice_acerto(j) = 100*(acertos/num2);
    indice_erro(j) = 100-indice_acerto(j);
    j
end

figure
surf(kohonen);
set(gca,'FontSize',25)

